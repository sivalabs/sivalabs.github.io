<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SivaLabs</title>
    <link>https://sivalabs.github.io/posts/</link>
    <description>Recent content in Posts on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Jul 2020 04:59:17 +0530</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoLang from a Java developer perspective</title>
      <link>https://sivalabs.github.io/2020/07/golang-from-a-java-developer-perspective/</link>
      <pubDate>Thu, 02 Jul 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/07/golang-from-a-java-developer-perspective/</guid>
      <description>Gone are the days we can call ourselves as Java developer, .NET developer, Python developer etc. Nowadays we might need to work with multiple languages to some extent such as Python for scripting, Go for CLI utilities etc.
Out of personal interest I started learning Go Language 3 months ago and I am using Go for our current application. In this article I would like to share my first impression on Go language.</description>
    </item>
    
    <item>
      <title>My proud moment as a mentor</title>
      <link>https://sivalabs.github.io/2020/06/my-proud-moment-as-a-mentor/</link>
      <pubDate>Mon, 08 Jun 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/06/my-proud-moment-as-a-mentor/</guid>
      <description>As software developers, most of us implicitly assume gaining strong technical skills might make us successful. Many of us assume being good at cutting edge technologies, mastering keyboard shortcuts, being able to work on front-end, back-end and infrastructure etc etc will make us successful in our careers.
Yes, the above mentioned skills definitely help, but just being good at tech skills might not make us successful. There is more to it.</description>
    </item>
    
    <item>
      <title>Remote debugging springboot application</title>
      <link>https://sivalabs.github.io/2020/05/remote-debugging-spring-boot-application/</link>
      <pubDate>Sun, 31 May 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/05/remote-debugging-spring-boot-application/</guid>
      <description>We all know how to run SpringBoot application in debug mode from our favorite IDEs(Eclipse/IntellijIDEA etc) and debug the code. Recently I had to debug a SpringBoot application which is running on a remote server.
There is already lot of information on the Internet on how to remote debug java applications, but some approaches didn&amp;rsquo;t work for me. So, here I would like to share my findings.
If application is running on localhost Suppose you are running your application on localhost only and remote debug from your IDE.</description>
    </item>
    
    <item>
      <title>What I Learned in Week-14, 2020</title>
      <link>https://sivalabs.github.io/2020/04/what-i-learned-2020-week-14/</link>
      <pubDate>Mon, 06 Apr 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/04/what-i-learned-2020-week-14/</guid>
      <description>It&amp;rsquo;s been tough time for everyone due to the Corona virus situation. Staying at home for weeks and weeks is not easy, but it is very necessary thing to do so that we don&amp;rsquo;t spread the virus.
However, if I look on the bright side I used to spend minimum 3 hours for office commute everyday. Now I am using that time for various other activities including learning some new things.</description>
    </item>
    
    <item>
      <title>Imposing Code Structure Guidelines using ArchUnit</title>
      <link>https://sivalabs.github.io/2020/04/impose-architecture-guidelines-using-archunit/</link>
      <pubDate>Thu, 02 Apr 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/04/impose-architecture-guidelines-using-archunit/</guid>
      <description>While building the software we all agree, as a team, to follow a set of guidelines which are typically considered as best practices. But during the development, developers might violate those guidelines unknowingly or ignorance. Typically we rely upon code reviews or code quality checking tools like SonarQube, PMD etc to check for such violations. But some of the guidelines could be opinionated decisions which might not be able to automate using SonarQube, PMD etc.</description>
    </item>
    
    <item>
      <title>What I Learned in Week-11, 2020</title>
      <link>https://sivalabs.github.io/2020/03/what-i-learned-2020-week-11/</link>
      <pubDate>Sun, 15 Mar 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/03/what-i-learned-2020-week-11/</guid>
      <description>I come across many blog posts from various sources like Twitter, StackOverflow etc and some of them are very helpful. Also, in day to day work I learn few new things, explore some new tools. Usually I keep track of this information using Browser Bookmarks and Pocket.
I thought may be this information could be useful for others too. So, I am going to share it weekly on my blog.</description>
    </item>
    
    <item>
      <title>SpringBoot Integration Testing using TestContainers Starter</title>
      <link>https://sivalabs.github.io/2020/02/spring-boot-integration-testing-using-testcontainers-starter/</link>
      <pubDate>Mon, 03 Feb 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/02/spring-boot-integration-testing-using-testcontainers-starter/</guid>
      <description>One of the many reasons for huge popularity of Spring and SpringBoot is it&amp;rsquo;s great support for Testing. We can write unit tests using Mockito without requiring any Spring features. And, we can write Integration Tests using Spring testing support by creating Spring ApplicationContext.
 Read Guide to Testing SpringBoot Applications
 While running integration tests we might need to interact with external services like relational databases, NoSQL datastores, Kafka etc.</description>
    </item>
    
    <item>
      <title>Creating Yeoman based SpringBoot Generator</title>
      <link>https://sivalabs.github.io/2020/01/creating-yeoman-based-springboot-generator/</link>
      <pubDate>Wed, 29 Jan 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/01/creating-yeoman-based-springboot-generator/</guid>
      <description>I have been working with Spring and SpringBoot for many years and I needed to create lot of Spring(Boot) applications for various reasons like blog posts, sample apps, book sample code and for my personal learning as well. So, I needed some tool/mechanism to quickly create Spring(Boot) application with most commonly used configuration.
I know we have the most popular SpringBoot Initializer to create SpringBoot applications. But, it generates the application with only selected starter dependencies added and nothing more.</description>
    </item>
    
    <item>
      <title>Testing REST APIs using Postman and Newman</title>
      <link>https://sivalabs.github.io/2019/10/testing-rest-apis-with-postman-newman/</link>
      <pubDate>Sun, 20 Oct 2019 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2019/10/testing-rest-apis-with-postman-newman/</guid>
      <description>Postman is the most popular tool for testing REST APIs. I guess most of the developers are familiar with how to use Postman to send various types (GET, POST, PUT, DELETE, etc) of HTTP requests with various types of payloads (form data, JSON etc).
In addition to triggering one API request and verifying the response, I frequently come across some common needs like
 Call an API and assert response Parameterize variables based on the environment Trigger a series of API calls to simulate some user flow Trigger one API request with different inputs and assert expected response Load test by simulating load on the server by firing a series of requests repeatedly with a certain delay Run Postman collection to do Smoke Test from Build Pipeline  As I am already using Postman to test my REST APIs, I thought of exploring if I can do all these tasks using Postman itself and it turns out I can.</description>
    </item>
    
    <item>
      <title>Testing SpringBoot Applications</title>
      <link>https://sivalabs.github.io/2019/10/spring-boot-testing/</link>
      <pubDate>Mon, 07 Oct 2019 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2019/10/spring-boot-testing/</guid>
      <description>SpringBoot is the most popular tech stack for building Java based REST APIs. In this tutorial we will learn how to write tests for SpringBoot applications.
 Create SpringBoot Application Unit Testing using JUnit 5 and Mockito Integration Testing using TestContainers Testing MicroService Integrations using MockServer  As we all know, we write unit tests for testing single component (a class) behaviour where as we write integration tests for testing a feature which may involve interaction with multiple components.</description>
    </item>
    
    <item>
      <title>Kafka Tutorial - Producer and Consumer using SpringBoot</title>
      <link>https://sivalabs.github.io/2019/06/kafka-tutorial-producer-consumer-using-spring-boot/</link>
      <pubDate>Mon, 24 Jun 2019 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2019/06/kafka-tutorial-producer-consumer-using-spring-boot/</guid>
      <description>In the previous post Kafka Tutorial - Java Producer and Consumer we have learned how to implement a Producer and Consumer for a Kafka topic using plain Java Client API.
In this post we are going to look at how to use Spring for Kafka which provides high level abstraction over Kafka Java Client API to make it easier to work with Kafka.
 You can find the source code for this article at https://github.</description>
    </item>
    
    <item>
      <title>Kafka Tutorial - Java Producer and Consumer</title>
      <link>https://sivalabs.github.io/2019/06/kafka-tutorial-java-producer-consumer/</link>
      <pubDate>Fri, 21 Jun 2019 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2019/06/kafka-tutorial-java-producer-consumer/</guid>
      <description>Kafka, depending on how you use it, can be seen as a Message Broker, Event Store or a Streaming Platform etc. Kafka became a preferred technology for many of the modern applications because of various reasons like:
 Kafka can be used as an Event Store if you are using Event Driven Microservices architecture Kafka can be used as a Message Broker to enable communication across multiple applications Kafka can be used as Streaming platform for processing events in realtime etc etc.</description>
    </item>
    
    <item>
      <title>SpringBoot Best Practices</title>
      <link>https://sivalabs.github.io/2019/05/spring-boot-best-practices/</link>
      <pubDate>Tue, 14 May 2019 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2019/05/spring-boot-best-practices/</guid>
      <description>I have been working with SpringBoot for many years and over the time I worked with many SpringBoot based codebases. There are few common mistakes that I observe in the projects that use SpringBoot. So, I thought of writing down few good practices that can be followed while using SpringBoot.
1. Understand SpringBoot Core Concepts I know, this sounds very obvious but I see many developers jumping onto using SpringBoot without having any prior knowledge on Spring, Dependency Injection.</description>
    </item>
    
    <item>
      <title>MicroServices - Part 6 : Distributed Tracing with Spring Cloud Sleuth and Zipkin</title>
      <link>https://sivalabs.github.io/2018/03/microservices-part-6-distributed-tracing-with-spring-cloud-sleuth-and-zipkin/</link>
      <pubDate>Tue, 20 Mar 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/03/microservices-part-6-distributed-tracing-with-spring-cloud-sleuth-and-zipkin/</guid>
      <description>One of the challenges in microservices architecture is the ability to debug issues. A simple user action might trigger a chain of downstream microservice calls. It would be tedious to trace the logs related to a particular user action across microservices. In addition to that, we might want to track down why a certain microservice call is taking so much time. We can use Spring Cloud Sleuth to handle these kinds of issues.</description>
    </item>
    
    <item>
      <title>MicroServices - Part 5 : Spring Cloud Zuul Proxy as API Gateway</title>
      <link>https://sivalabs.github.io/2018/03/microservices-part-5-spring-cloud-zuul-proxy-as-api-gateway/</link>
      <pubDate>Thu, 15 Mar 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/03/microservices-part-5-spring-cloud-zuul-proxy-as-api-gateway/</guid>
      <description>In microservices architecture, there could be a number of API services and few UI components that are talking to APIs. As of now, many microservices based application still use monolithic front-ends where the entire UI is built as a single module. You may choose to go with micro-frontends where the UI is also decomposed into multiple microservice talking to APIs to get the relevant data. Instead of letting UI know about all our microservices details we can provide a unified proxy interface that will delegate the calls to various microservices based on URL pattern.</description>
    </item>
    
    <item>
      <title>MicroServices - Part 4 : Spring Cloud Circuit Breaker using Netflix Hystrix</title>
      <link>https://sivalabs.github.io/2018/03/spring-cloud-netflix-circuit-breaker/</link>
      <pubDate>Mon, 12 Mar 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/03/spring-cloud-netflix-circuit-breaker/</guid>
      <description>In the microservices world, to fulfill a client request one microservice may need to talk to other microservices. We should minimize this kind of direct dependencies on other microservices but in some cases it is unavoidable. If a microservice is down or not functioning properly then the issue may cascade up to the upstream services. Netflix created Hystrix library implementing Circuit Breaker pattern to address these kinds of issues. We can use Spring Cloud Netflix Hystrix Circuit Breaker to protect microservices from cascading failures.</description>
    </item>
    
    <item>
      <title>MicroServices - Part 3 : Spring Cloud Service Registry and Discovery</title>
      <link>https://sivalabs.github.io/2018/03/microservices-springcloud-eureka/</link>
      <pubDate>Thu, 08 Mar 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/03/microservices-springcloud-eureka/</guid>
      <description>In the microservices world, Service Registry and Discovery plays an important role because we most likely run multiple instances of services and we need a mechanism to call other services without hardcoding their hostnames or port numbers. In addition to that, in Cloud environments service instances may come up and go down anytime. So we need some automatic service registration and discovery mechanism. Spring Cloud provides Service Registry and Discovery features, as usual, with multiple options.</description>
    </item>
    
    <item>
      <title>MicroServices - Part 2 : Configuration Management with Spring Cloud Config and Vault</title>
      <link>https://sivalabs.github.io/2018/03/microservices-part-2-configuration-management-spring-cloud-config-vault/</link>
      <pubDate>Mon, 05 Mar 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/03/microservices-part-2-configuration-management-spring-cloud-config-vault/</guid>
      <description>In MicroServices using Spring Boot &amp;amp; Spring Cloud – Part 1 : Overview, we took a brief look at what are micro-services and how we can use SpringBoot and SpringCloud to build micro-services.
In this post, we are going to learn:
 What is the need for Spring Cloud Config and Vault? Create our first micro-service: catalog-service Create Spring Cloud Config Server Using Vault for storing sensitive data  MicroServices using Spring Boot &amp;amp; Spring Cloud</description>
    </item>
    
    <item>
      <title>MicroServices using Spring Boot &amp; Spring Cloud – Part 1 : Overview</title>
      <link>https://sivalabs.github.io/2018/03/microservices-using-springboot-spring-cloud-part-1-overview/</link>
      <pubDate>Fri, 02 Mar 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/03/microservices-using-springboot-spring-cloud-part-1-overview/</guid>
      <description>Nowadays MicroServices is the hot buzzword in software development and many organizations prefer building their enterprise applications using MicroServices architecture. In Java community, SpringBoot is the most widely used framework for building both monoliths and microservices. I am planning to write a series of articles covering how to build microservices using SpringBoot and SpringCloud.
In this article we are going to learn about following:
 Monoliths what are MicroServices? Advantages of MicroServices Challenges with MicroServices Why SpringBoot &amp;amp; SpringCloud are a good choice for MicroServices?</description>
    </item>
    
    <item>
      <title>Why SpringBoot is so popular and how to learn SpringBoot effectively?</title>
      <link>https://sivalabs.github.io/2018/02/why-springboot-so-popular-how-to-learn-springboot/</link>
      <pubDate>Thu, 22 Feb 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/02/why-springboot-so-popular-how-to-learn-springboot/</guid>
      <description>SpringBoot is the most popular and widely used Java framework. Occasionally this discussion of “Why is SpringBoot so popular?” come between me and my friends/colleagues. Also, I do get emails from various people asking “Spring is huge and how to learn it quickly?”. In this post, I will try to answer these 2 questions.
Why is SpringBoot so popular? There could be many reasons why Spring and SpringBoot are very popular, but in my opinion following are the key reasons:</description>
    </item>
    
    <item>
      <title>SpringBoot Messaging with RabbitMQ</title>
      <link>https://sivalabs.github.io/2018/02/springboot-messaging-rabbitmq/</link>
      <pubDate>Tue, 20 Feb 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/02/springboot-messaging-rabbitmq/</guid>
      <description>RabbitMQ is one of the popular message broker solutions and provides client libraries to be used from various programming languages including Java, Scala, .NET, Go, Python, Ruby, PHP etc. In this tutorial, we will learn how to use RabbitMQ message broker to send and receive messages from a SpringBoot application. We will also look at how to send messages as JSON payloads and how to deal with errors using Dead Letter Queues (DLQ).</description>
    </item>
    
    <item>
      <title>Session Management using Spring Session with JDBC DataStore</title>
      <link>https://sivalabs.github.io/2018/02/session-management-using-spring-session-jdbc-datastore/</link>
      <pubDate>Wed, 07 Feb 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/02/session-management-using-spring-session-jdbc-datastore/</guid>
      <description>In web applications, user session management is very crucial for managing user state. In this article, we are going to learn about what are the approaches we have been following to manage user sessions in a clustered environment and how we can use Spring Session to implement it in a much simpler and more scalable way.
Typically in production environments, we will have multiple server nodes with a load balancer in front of them and all the client traffic will be coming through the load balancer to one of the server nodes.</description>
    </item>
    
    <item>
      <title>CI/CD for SpringBoot applications using Travis-CI</title>
      <link>https://sivalabs.github.io/2018/01/ci-cd-springboot-applications-using-travis-ci/</link>
      <pubDate>Wed, 24 Jan 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/01/ci-cd-springboot-applications-using-travis-ci/</guid>
      <description>In this article we are going to learn how we can use Travis CI for Continuous Integration and Continuous Deployment (CI/CD) of a SpringBoot application. We will learn how to run maven build goals, perform test coverage validation using JaCoCo plugin, Code Quality checks using SonarCloud, build Docker image and push it to DockerHub and finally deploy it to Heroku.
 The source code for this article is at https://github.com/sivaprasadreddy/jblogger</description>
    </item>
    
    <item>
      <title>How was my year 2017 and my plans for 2018</title>
      <link>https://sivalabs.github.io/2018/01/how-was-my-year-2017-and-plan-for-2018/</link>
      <pubDate>Mon, 01 Jan 2018 07:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2018/01/how-was-my-year-2017-and-plan-for-2018/</guid>
      <description>Happy new year to you :-) I don&amp;rsquo;t really believe in new year resolutions or making big 5 year plans!! But I do realize that by making a list of things that I want to do keeps me focus on those things and minimize the distractions.
Before going to talk about my grand plans for 2018 let me take moment and see how was my 2017.
What I did in 2017  I wrote a new book Beginning Spring Boot 2 with Apress publishers I learned a lot of good practices at ThoughtWorks I gave a conference talk on MicroServices at DevConHyd 2017 Conference I gave a GeekNight talk on Cloud Native Applications using SpringBoot and Spring Cloud I quit my job to start my own consulting gig Learned to Say NO  The year 2017 is a wonderful year for me in many ways.</description>
    </item>
    
    <item>
      <title>My Review of Vlad Mihalcea’s High-Performance Java Persistence book</title>
      <link>https://sivalabs.github.io/2017/11/my-review-of-vlad-mihalceas-high-performance-java-persistence-book/</link>
      <pubDate>Sun, 05 Nov 2017 04:59:17 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/11/my-review-of-vlad-mihalceas-high-performance-java-persistence-book/</guid>
      <description>In Java world, JPA/Hibernate is the most popular and widely used framework. When it comes to overall performance of a software system database persistence layer plays the crucial role. The tricky part with JPA/Hibernate is it is very easy to get started but very very hard to master. This is where Vlad Mihalcea‘s High-Performance Java Persistence book helps you a lot.

The High-Performance Java Persistence book is not just another Hibernate book saying you put this annotation here and call that method there and you are done.</description>
    </item>
    
    <item>
      <title>Select ALL starters on Spring Initializer (http://start.spring.io)</title>
      <link>https://sivalabs.github.io/2017/10/select-all-starters-on-spring-initializer-httpstart-spring-io/</link>
      <pubDate>Wed, 18 Oct 2017 02:50:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/10/select-all-starters-on-spring-initializer-httpstart-spring-io/</guid>
      <description>If you are working on Spring Boot then you most probably aware of Spring Initializer (http://start.spring.io) which is an online spring boot application generator. You can select the starters that you want to use and then generate the application.
If you notice that there is no SELECT ALL option to select all the starters. Who would do that insane thing of selecting all the starters for an application??!!???
But, i would like to have the SELECT ALL option for one single reason:</description>
    </item>
    
    <item>
      <title>Spring Cloud Tutorials – Auto Refresh Config Changes using Spring Cloud Bus</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</link>
      <pubDate>Mon, 14 Aug 2017 12:30:43 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</guid>
      <description>Problem In the previous article Introduction to Spring Cloud Config Server we have seen how to use Spring Cloud Config Server.
But, the problem is to reload the config changes in Config Client applications we need to trigger /refresh endpoint manually. This is not practical and viable if you have large number of applications.
Solution Spring Cloud Bus module can be used to link multiple applications with a message broker and we can broadcast configuration changes.</description>
    </item>
    
    <item>
      <title>Spring Cloud Tutorials – Introduction to Spring Cloud Config Server</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</link>
      <pubDate>Mon, 14 Aug 2017 03:35:07 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</guid>
      <description>Problem SpringBoot provides lot of flexibility in externalizing configuration properties via properties or YAML files. We can also configure properties for each environment (dev, qa, prod etc) separately using profile specific configuration files such as application.properties, application-dev.properties, application-prod.properties etc. But once the application is started we can not update the properties at runtime. If we change the properties we need to restart the application to use the updated configuration properties.</description>
    </item>
    
    <item>
      <title>Getting Started with SpringBoot in Intellij IDEA Community Edition</title>
      <link>https://sivalabs.github.io/2016/09/getting-started-springboot-intellij-idea-community-edition/</link>
      <pubDate>Wed, 07 Sep 2016 09:53:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/09/getting-started-springboot-intellij-idea-community-edition/</guid>
      <description>We can use Intellij IDEA Community Edition for working with SpringBoot applications as we don&amp;rsquo;t need support for configuring servers like Tomcat, Wildlfy etc and can simply run the applications by running main() method.
However, there is no provision in Intellij IDEA Community Edition to create SpringBoot application directly, the way it supports in Ultimate Edition.
We can go to http://start.spring.io/ and generate the project and then import into our IDE.</description>
    </item>
    
    <item>
      <title>Update on SpringBoot : Learn By Example book</title>
      <link>https://sivalabs.github.io/2016/07/update-springboot-learn-example-book/</link>
      <pubDate>Sat, 30 Jul 2016 02:53:50 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/07/update-springboot-learn-example-book/</guid>
      <description>I would like to let you know that I have updated/added the following sections to my SpringBoot : Learn By Example book.
Additions to existing chapters:  Working with Multiple Databases Exposing JPA entities with bi-directional references through RESTful services  In some of our applications we need to work with multiple databases. For example, we may have a primary database and a reporting database where most the application uses primary database and the application reports will be generated out of reporting database data.</description>
    </item>
    
    <item>
      <title>How to fix “vt-x is disabled in the bios” error?</title>
      <link>https://sivalabs.github.io/2016/07/fix-vt-x-disabled-bios-error/</link>
      <pubDate>Thu, 21 Jul 2016 01:54:29 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/07/fix-vt-x-disabled-bios-error/</guid>
      <description>If you face the vt-x is disabled in the bios error while trying to run Android emulator, here is the solution that worked for me.
Step 1: Enable Virtualization Technology in BIOS Go to BIOS Setup and enable “Virtualization Technology” option.
On my Lenovo laptop this option was already enabled, but still getting this error. I have disabled it and re-enabled it, then it is working.
Step 2: Install HAXM Installer from Android SDK Manager Start the Android SDK Manager, select Extras -&amp;gt; Intel x86 Emulator Accelerator (HAXM Installer) and install it.</description>
    </item>
    
    <item>
      <title>My New Book SpringBoot : Learn By Example Published Today</title>
      <link>https://sivalabs.github.io/2016/07/my-new-book-springboot-learn-by-example/</link>
      <pubDate>Wed, 20 Jul 2016 06:05:31 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/07/my-new-book-springboot-learn-by-example/</guid>
      <description>I am happy to announce that my new book SpringBoot : Learn By Example got published today on Leanpub.
  What is SpringBoot? Spring is one of the most popular Java frameworks out there to build web and enterprise application.
Spring supports variety of configuration approaches (XML, Annotations, JavaConfig etc) and properly configuring Spring applications become a bit tedious and repetitive process. To avoid these problems Spring team introduced SpringBoot to address the complexity of configuring Spring application.</description>
    </item>
    
    <item>
      <title>Creating Custom SpringBoot Starter for Twitter4j</title>
      <link>https://sivalabs.github.io/2016/04/creating-custom-springboot-starter-for/</link>
      <pubDate>Fri, 08 Apr 2016 06:57:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/04/creating-custom-springboot-starter-for/</guid>
      <description>SpringBoot provides lot of starter modules to get up and running quickly. SpringBoot’s auto-configure mechanism takes care of configuring SpringBeans on our behalf based on various criteria.
In addition to the springboot starters that comes out-of-the-box provided by Core Spring Team, we can also create our own starter modules.
In this post we will look into how to create a custom SpringBoot starter. To demonstrate it we are going to create twitter4j-spring-boot-starter which will auto-configure Twitter4J beans.</description>
    </item>
    
    <item>
      <title>SpringBoot : Working with JOOQ</title>
      <link>https://sivalabs.github.io/2016/03/springboot-working-with-jooq/</link>
      <pubDate>Tue, 15 Mar 2016 07:13:21 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/springboot-working-with-jooq/</guid>
      <description>In my previous article SpringBoot : Working with MyBatis we have learned how to use SpringBoot MyBatis Starter to quickly get up and running with Spring and MyBatis. In this article we are going to learn about how to use SpringBoot JOOQ Starter.
JOOQ (JOOQ Object Oriented Querying) is a persistence framework which embraces SQL.
JOOQ provides the following features:
  Building Typesafe SQL using DSL API   Typesafe database object referencing using Code Generation   Easy to use API for Querying and Data fetching   SQL logging and debugging</description>
    </item>
    
    <item>
      <title>SpringBoot : Working with MyBatis</title>
      <link>https://sivalabs.github.io/2016/03/springboot-working-with-mybatis/</link>
      <pubDate>Mon, 14 Mar 2016 07:10:42 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/springboot-working-with-mybatis/</guid>
      <description>MyBatis is a SQL Mapping framework with support for custom SQL, stored procedures and advanced mappings.
 SpringBoot doesn’t provide official support for MyBatis integration, but MyBatis community built a SpringBoot starter for MyBatis.
 You can read about the SpringBoot MyBatis Starter release announcement at http://blog.mybatis.org/2015/11/mybatis-spring-boot-released.html and you can explore the source code on GitHub https://github.com/mybatis/mybatis-spring-boot.
Create a SpringBoot Maven project and add the following MyBatis Starter dependency. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>SpringBoot : Working with JdbcTemplate</title>
      <link>https://sivalabs.github.io/2016/03/springboot-working-with-jdbctemplate/</link>
      <pubDate>Mon, 14 Mar 2016 07:08:22 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/springboot-working-with-jdbctemplate/</guid>
      <description>Spring provides a nice abstraction on top of JDBC API using JdbcTemplate and also provides great transaction management capabilities using annotation based approach.
First let’s take a quick look at how we generally use Spring’s JdbcTemplate (without SpringBoot) by registering DataSource, TransactionManager and JdbcTemplate beans and optionally we can register DataSourceInitializer bean to initialize our database.
@Configuration @ComponentScan @EnableTransactionManagement @PropertySource(value = { &amp;#34;classpath:application.properties&amp;#34; }) public class AppConfig { @Autowired private Environment env; @Value(&amp;#34;${init-db:false}&amp;#34;) private String initDatabase; @Bean public static PropertySourcesPlaceholderConfigurer placeHolderConfigurer() { return new PropertySourcesPlaceholderConfigurer(); } @Bean public JdbcTemplate jdbcTemplate(DataSource dataSource) { return new JdbcTemplate(dataSource); } @Bean public PlatformTransactionManager transactionManager(DataSource dataSource) { return new DataSourceTransactionManager(dataSource); } @Bean public DataSource dataSource() { BasicDataSource dataSource = new BasicDataSource(); dataSource.</description>
    </item>
    
    <item>
      <title>How SpringBoot AutoConfiguration magic works?</title>
      <link>https://sivalabs.github.io/2016/03/how-springboot-autoconfiguration-magic/</link>
      <pubDate>Sun, 13 Mar 2016 07:04:56 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/how-springboot-autoconfiguration-magic/</guid>
      <description>In my previous post Why SpringBoot? we have looked at how to create a SpringBoot application. But you may or may not understand what is going on behind the scenes. You may want to understand the magic behind the SpringBoot’s AutoConfiguration.
But before that you should know about Spring’s @Conditional feature based on which all the SpringBoot’s AutoConfiguration magic depends.
Exploring the power of @Conditional While developing Spring based applications we may come across of a need to register beans conditionally.</description>
    </item>
    
    <item>
      <title>Why SpringBoot?</title>
      <link>https://sivalabs.github.io/2016/03/why-springboot/</link>
      <pubDate>Sun, 13 Mar 2016 07:02:10 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/why-springboot/</guid>
      <description>Spring is a very popular Java based framework for building web and enterprise applications. Unlike many other frameworks which focuses on only one area, Spring framework provides a wide verity of features addressing the modern business needs via its portfolio projects.
Spring framework provides flexibility to configure the beans in multiple ways such as XML, Annotations and JavaConfig. With the number of features increased the complexity also gets increased and configuring Spring applications becomes tedious and error-prone.</description>
    </item>
    
    <item>
      <title>Retrying Method Execution using Spring AOP</title>
      <link>https://sivalabs.github.io/2016/01/retrying-method-execution-using-spring-aop/</link>
      <pubDate>Tue, 05 Jan 2016 15:40:36 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/01/retrying-method-execution-using-spring-aop/</guid>
      <description>One of my blog follower sends an email asking me to show an example of “RealWorld Usage of Spring AOP”. He mentioned that in most of the examples the usage of Spring AOP is demonstrated for logging method entry/exit or Transaction management or Security checks. He wanted to know how Spring AOP is being used in “Real Project for Real Problems”.
So I would like to show how I have used Spring AOP for one of my project to handle a real problem.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-8</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-8/</link>
      <pubDate>Thu, 31 Dec 2015 11:37:10 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-8/</guid>
      <description>In this Iteration#8 we will implement showing the Customer Account and Order History functionality in our ShoppingCart application.
 Customer MyAccount Page  Profile Order History    Once the customer is logged in our system he can click on MyAccount link at the top of the header and view his profile details and order history.
First let us write the Controller handler method in our CustomerController to show myAccount details.</description>
    </item>
    
    <item>
      <title>JCart : Manage Customers</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-customers/</link>
      <pubDate>Thu, 31 Dec 2015 09:34:50 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-customers/</guid>
      <description>For Managing Customers we need a provision to see all the list of customers and view any Customers details.
Let us start with implementing the back-end Customer service.
public interface CustomerRepository extends JpaRepository&amp;lt;Customer, Integer&amp;gt; { Customer findByEmail(String email); @Query(&amp;#34;select o from Order o where o.customer.email=?1&amp;#34;) List&amp;lt;Order&amp;gt; getCustomerOrders(String email); } @Service @Transactional public class CustomerService { @Autowired CustomerRepository customerRepository; public Customer getCustomerByEmail(String email) { return customerRepository.findByEmail(email); } public Customer createCustomer(Customer customer) { return customerRepository.</description>
    </item>
    
    <item>
      <title>JCart : Manage Orders</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-orders/</link>
      <pubDate>Thu, 31 Dec 2015 09:21:17 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-orders/</guid>
      <description>For Managing Orders we need a provision to see all the list of orders and view an order details and updating the order status.
Let us start with implementing the back-end order service.
@Service @Transactional public class OrderService { @Autowired EmailService emailService; @Autowired OrderRepository orderRepository; ... ... public Order getOrder(String orderNumber) { return orderRepository.findByOrderNumber(orderNumber); } public List&amp;lt;Order&amp;gt; getAllOrders() { Sort sort = new Sort(Direction.DESC, &amp;#34;createdOn&amp;#34;); return orderRepository.findAll(sort); } public Order updateOrder(Order order) { Order o = getOrder(order.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-7</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-7/</link>
      <pubDate>Thu, 31 Dec 2015 09:17:15 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-7/</guid>
      <description>In Iteration#6 we have implemented features in ShoppingCart application to enable Customers place orders. In this Iteration#7 we will implement the features in Administration application to view and manage the Customers and Orders.
As part of Iteration#7 we will implement the following usecases:
 Manage Orders  List all Orders View Order details Update Order status   Manage Customers  List all customers View customer details    </description>
    </item>
    
    <item>
      <title>JCart : Billing and Delivery Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-billing-and-delivery-page/</link>
      <pubDate>Thu, 31 Dec 2015 07:40:14 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-billing-and-delivery-page/</guid>
      <description>Once the customer reviewed his cart items details and clicks on Checkout we should display Billing &amp;amp; Delivery page where customer enters delivery address details, payment details etc and place the order.
Let us create a OrderDTO.java as follows:
public class OrderDTO implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty(message=&amp;#34;FirstName is required&amp;#34;) private String firstName; @NotEmpty(message=&amp;#34;LastName is required&amp;#34;) private String lastName; @NotEmpty(message=&amp;#34;EmailId is required&amp;#34;) @Email private String emailId; @NotEmpty(message=&amp;#34;Phone is required&amp;#34;) private String phone; @NotEmpty(message=&amp;#34;Address Line1 is required&amp;#34;) private String addressLine1; private String addressLine2; @NotEmpty(message=&amp;#34;City is required&amp;#34;) private String city; @NotEmpty(message=&amp;#34;State is required&amp;#34;) private String state; @NotEmpty(message=&amp;#34;ZipCode is required&amp;#34;) private String zipCode; @NotEmpty(message=&amp;#34;Country is required&amp;#34;) private String country; @NotEmpty(message=&amp;#34;FirstName is required&amp;#34;) private String billingFirstName; @NotEmpty(message=&amp;#34;LastName is required&amp;#34;) private String billingLastName; @NotEmpty(message=&amp;#34;Address Line1 is required&amp;#34;) private String billingAddressLine1; private String billingAddressLine2; @NotEmpty(message=&amp;#34;City is required&amp;#34;) private String billingCity; @NotEmpty(message=&amp;#34;State is required&amp;#34;) private String billingState; @NotEmpty(message=&amp;#34;ZipCode is required&amp;#34;) private String billingZipCode; @NotEmpty(message=&amp;#34;Country is required&amp;#34;) private String billingCountry; @NotEmpty(message=&amp;#34;Credit Card Number is required&amp;#34;) private String ccNumber; @NotEmpty(message=&amp;#34;CVV is required&amp;#34;) private String cvv; //setters &amp;amp; getters } Create CheckoutController to display the Billing &amp;amp; Delivery page as follows:</description>
    </item>
    
    <item>
      <title>JCart : Customer Registration</title>
      <link>https://sivalabs.github.io/2015/12/jcart-customer-registration/</link>
      <pubDate>Thu, 31 Dec 2015 07:24:01 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-customer-registration/</guid>
      <description>To facilitate new customer registration we will provide a new Registration form where customer provide his details and register with our system.
Let us implement the back-end customer service operations.
public interface CustomerRepository extends JpaRepository&amp;lt;Customer, Integer&amp;gt;{ Customer findByEmail(String email); } @Service @Transactional public class CustomerService { @Autowired CustomerRepository customerRepository; public Customer getCustomerByEmail(String email) { return customerRepository.findByEmail(email); } public Customer createCustomer(Customer customer) { return customerRepository.save(customer); } } @Component public class CustomerValidator implements Validator { @Autowired private CustomerService custmoerService; @Override public boolean supports(Class&amp;lt;?</description>
    </item>
    
    <item>
      <title>JCart : Customer Login</title>
      <link>https://sivalabs.github.io/2015/12/jcart-customer-login/</link>
      <pubDate>Thu, 31 Dec 2015 07:20:06 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-customer-login/</guid>
      <description>So far we have implemented the functionality where customers can browse the categories, add products to cart, view Cart and update/remove items.
But to checkout the cart the customer should login into the system. So if the customer is not yet loggedin we should redirect customer to login page. If customer is already registered with our system he can login or he should be able to register. So, we will start implementing Customer Login/Registration usecases.</description>
    </item>
    
    <item>
      <title>JCart : Iteration -6</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-6/</link>
      <pubDate>Thu, 31 Dec 2015 07:16:40 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-6/</guid>
      <description>In this Iteration-6 we will be implementing the Customer Login/Register and placing the orders.
As per of this we will implement the following usecases:
 Customer Login Customer Registration Billing &amp;amp; Delivery Page  Create Order Order Confirmation Page Send Order Confirmation Email    </description>
    </item>
    
    <item>
      <title>JCart : View Cart</title>
      <link>https://sivalabs.github.io/2015/12/jcart-view-cart/</link>
      <pubDate>Thu, 31 Dec 2015 05:32:11 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-view-cart/</guid>
      <description>In our earlier post we have implemented Add To Cart functionality. In this post we will implement showing the Cart Item details.
In out mainLayout.html header we have ShoppingCart icon showing the cart item count as follows:
&amp;lt;div class=&amp;#34;shopping-item&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; th:href=&amp;#34;@{/cart}&amp;#34;&amp;gt;Cart &amp;lt;i class=&amp;#34;fa fa-shopping-cart&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span id=&amp;#34;cart-item-count&amp;#34; class=&amp;#34;product-count&amp;#34;&amp;gt;(0)&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; When customer clicks on Cart icon we will show the Cart details. Let us implement the “/cart” url handler method in CartController as follows:</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Add Item To Cart</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-add-item-to-cart/</link>
      <pubDate>Thu, 31 Dec 2015 05:27:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-add-item-to-cart/</guid>
      <description>In our HomePage/CategoryPage/ProductPage we have a button Add To Cart as follows:
&amp;lt;a class=&amp;#34;add_to_cart_button&amp;#34; data-quantity=&amp;#34;1&amp;#34; data-product_sku=&amp;#34;&amp;#34; data-product_id=&amp;#34;70&amp;#34; rel=&amp;#34;nofollow&amp;#34; href=&amp;#34;#&amp;#34; th:onclick=&amp;#34;&amp;#39;javascript:addItemToCart(\&amp;#39;&amp;#39; + ${product.sku} + &amp;#39;\&amp;#39;);&amp;#39;&amp;#34;&amp;gt; Add to cart &amp;lt;/a&amp;gt; When customer clicks on Add To Cart button it will trigger addItemToCart(sku) JavaScript function passing the product SKU value.
Now create jcart-site/src/main/resources/static/assets/js/app.js and implement addItemToCart(sku) function as follows:
function addItemToCart(sku) { $.ajax ({ url: &amp;#39;/cart/items&amp;#39;, type: &amp;#34;POST&amp;#34;, dataType: &amp;#34;json&amp;#34;, contentType: &amp;#34;application/json&amp;#34;, data : &amp;#39;{&amp;#34;sku&amp;#34;:&amp;#34;&amp;#39;+ sku +&amp;#39;&amp;#34;}&amp;#34;&amp;#39;, complete: function(responseData, status, xhttp){ updateCartItemCount();	} }); } This function triggers an Ajax call to url ‘/cart/items&amp;rsquo; using jQuery and if it is successful we are calling another JavaScript function updateCartItemCount().</description>
    </item>
    
    <item>
      <title>JCart : Iteration-5</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-5/</link>
      <pubDate>Thu, 31 Dec 2015 05:19:06 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-5/</guid>
      <description>In Iteration-5 we will be primarily working on Cart related functionality. As part of Iteration-4 we have implemented showing Home page, Category Page, Product Page and Product Search features.
In this Iteration we will implement the following usecases:
 Add To Cart in HomePage/CategoryPage/ProductPage Cart Page  View Cart Items Updates Quantity Remove Items    </description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Product Search Results</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-search-results/</link>
      <pubDate>Wed, 30 Dec 2015 14:27:57 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-search-results/</guid>
      <description>In our main template we have a Search box to search for products. In this post we will implement the Product Search functionality. When customer search for a product we will search products based on name or SKU or description.
Let us implement the search handler method in ProductController as follows:
@Controller public class ProductController extends JCartSiteBaseController {	@Autowired protected CatalogService catalogService; ... ... @RequestMapping(&amp;#34;/products&amp;#34;) public String searchProducts(@RequestParam(name=&amp;#34;q&amp;#34;, defaultValue=&amp;#34;&amp;#34;) String query, Model model) { List&amp;lt;Product&amp;gt; products = catalogService.</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Product Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-page/</link>
      <pubDate>Wed, 30 Dec 2015 14:25:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-page/</guid>
      <description>Customers can click on a product to view more details about the product either in Home Page or in Category Page.
Let us implement Controller method to show Product details as follows:
@Controller public class ProductController extends JCartSiteBaseController {	@Autowired protected CatalogService catalogService; .... .... @RequestMapping(&amp;#34;/products/{sku}&amp;#34;) public String product(@PathVariable String sku, Model model) { Product product = catalogService.getProductBySku(sku); model.addAttribute(&amp;#34;product&amp;#34;, product); return &amp;#34;product&amp;#34;; } } @Service @Transactional public class CatalogService { @Autowired ProductRepository productRepository; .</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Category Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-category-page/</link>
      <pubDate>Wed, 30 Dec 2015 14:23:06 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-category-page/</guid>
      <description>In our Home Page we displayed all the Categories along with few products per each category. When customer clicks on any Category Name we should display Category Page which shows all the products in that Category.
We already have HomeController.category() method to handle the URL /categories/{name}.
So let us create category.html thymeleaf template as follows:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34; xmlns:sec=&amp;#34;http://www.thymeleaf.org/thymeleaf-extras-springsecurity3&amp;#34; layout:decorator=&amp;#34;layout/mainLayout&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Category&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div layout:fragment=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;single-product-area&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;zigzag-bottom&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;woocommerce-info&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;&amp;#34; th:href=&amp;#34;@{/}&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt; / &amp;lt;a href=&amp;#34;&amp;#34; th:href=&amp;#34;@{/categories/{name}(name=${category.</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Home Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-home-page/</link>
      <pubDate>Wed, 30 Dec 2015 14:20:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-home-page/</guid>
      <description>In our Home page we will show all the categories along with few of the products in each Category.
Let us update HomeController with two methods to show all the categories and the selected category products.
@Controller public class HomeController extends JCartSiteBaseController {	@Autowired protected CatalogService catalogService; @RequestMapping(&amp;#34;/home&amp;#34;) public String home(Model model) { List&amp;lt;Category&amp;gt; previewCategories = new ArrayList&amp;lt;&amp;gt;(); List&amp;lt;Category&amp;gt; categories = catalogService.getAllCategories(); for (Category category : categories) { Set&amp;lt;Product&amp;gt; products = category.</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart UI Layout Setup</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-ui-layout-setup/</link>
      <pubDate>Wed, 30 Dec 2015 14:17:41 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-ui-layout-setup/</guid>
      <description>In this post we will setup the layout for our ShoppingCart UI using Thymeleaf templates.
Download the ustore theme zip file from https://www.freshdesignweb.com/ustora/and copy the following directories/files into jcart-site/src/main/resources/static/assets folder.
 css fonts img js style.css  Create Site layout thymeleaf template jcart-site/src/main/resources/templates/layout/mainLayout.html as follows:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34; xmlns:sec=&amp;#34;http://www.thymeleaf.org/thymeleaf-extras-springsecurity3&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;/&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;/&amp;gt; &amp;lt;title layout:title-pattern=&amp;#34;$DECORATOR_TITLE - $CONTENT_TITLE&amp;#34;&amp;gt;QuilCart&amp;lt;/title&amp;gt; &amp;lt;!-- Google Fonts --&amp;gt; &amp;lt;link href=&amp;#39;https://fonts.</description>
    </item>
    
    <item>
      <title>JCart : Initial code setup for ShoppingCart</title>
      <link>https://sivalabs.github.io/2015/12/jcart-initial-code-setup-for-shoppingcart/</link>
      <pubDate>Wed, 30 Dec 2015 14:15:54 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-initial-code-setup-for-shoppingcart/</guid>
      <description>First we will start with setting up the initial code using SpringBoot. We have already discussed in JCart: Initial Code SetUp article about creating a maven module jcart-site which will be our ShoppingCart application. In that article we have shown what springboot dependencies to add as well.
Just to recap we will be using SpringBoot, SpringMVC, Thymeleaf, JPA for our ShoppingCart application.
jcart-site/pom.xml
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;com.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-4</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-4/</link>
      <pubDate>Wed, 30 Dec 2015 14:14:40 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-4/</guid>
      <description>In this Iteration-4 we will start building the consumer facing ShoppingCart website.
 Initial code setup for ShoppingCart webapp  [Configuring HTTPS/SSL/TLS] (/2015/12/jcart-configuring-https-ssltls/)   ShoppingCart UI Layout setup Home Page Category Page Product Page Product Search Results  </description>
    </item>
    
    <item>
      <title>JCart Iteration-3 : Manage Categories and Products</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-3-manage-categories-and-products/</link>
      <pubDate>Sun, 20 Dec 2015 05:58:44 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-3-manage-categories-and-products/</guid>
      <description>In this iteration we will start working on the key requirement of our JCart administration application, ie managing categories and products.
We will create various categories like Birds, Flowers, Vehicles etc. While creating products we will assign it to one of the category.
Managing Categories and Products also looks similar to Manage Roles and Users. But there are few new things we will learn like FileUploading etc.
Create Spring Data JPA Repositories for Category and Product public interface CategoryRepository extends JpaRepository&amp;lt;Category, Integer&amp;gt; { Category getByName(String name); } public interface ProductRepository extends JpaRepository&amp;lt;Product, Integer&amp;gt; { Product findByName(String name); Product findBySku(String sku); @Query(&amp;#34;select p from Product p where p.</description>
    </item>
    
    <item>
      <title>JCart: Manage Users</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-users/</link>
      <pubDate>Sat, 19 Dec 2015 06:20:55 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-users/</guid>
      <description>In our previous post JCart: Manage Roles we have seen how to list all roles, create new roles and update them.
Implementation of Manage Users also follows the same approach and very similar to the Implementation of Manage Roles. So I am not posting details of the implementation here again. Instead you can simply refer the code on JCart github repository https://github.com/sivaprasadreddy/jcart.
If you have any questions regarding the implementation of Manage Users please post a comment.</description>
    </item>
    
    <item>
      <title>JCart: Manage Roles</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-roles/</link>
      <pubDate>Sat, 19 Dec 2015 03:16:38 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-roles/</guid>
      <description>In our previous post Manage Privileges – List all privileges we have implemented the functionality to show list of permissions. In this post we will implement Role management such as listing all Roles, creating new Role, editing Role permissions etc.
Basically a Role is nothing a but group of Permissions assigned so that giving access to a set of action to user will become easy by assigning Roles.
In this post we are going to see lot of code snippets, so I would suggest to clone the repo https://github.</description>
    </item>
    
    <item>
      <title>JCart: Manage Privileges</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-privileges/</link>
      <pubDate>Fri, 18 Dec 2015 14:32:52 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-privileges/</guid>
      <description>This is the simplest usecase of entire JCart admin application :-). We need to show list of permissions configured in our system.
In our system each permission is more like access to a particular screen. For example, If a user has MANAGE_CATEGORIES permission then only he can access “Categories” screen. So these set of permission are something like implemented features set, hence we don&amp;rsquo;t need any provision to add/update/delete permissions dynamically.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-2</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-2/</link>
      <pubDate>Fri, 18 Dec 2015 13:38:10 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-2/</guid>
      <description>Now we have completed Iteration-1 tasks. Iteration-1 includes so many tasks to establish the foundation like configuring Spring Security, Thymeleaf settings, UI layout setup etc. I hope from now on we can put more focus on actual tasks implementation rather than infrastructure setup.
Though majority of the infrastructure setup is in place now, we will implement Role Based Access Control (RBAC) security using User-Role-Permission model before jumping on to Category/Product management.</description>
    </item>
    
    <item>
      <title>Setting up Jenkins/SonarQube</title>
      <link>https://sivalabs.github.io/2015/12/setting-up-jenkinssonarqube/</link>
      <pubDate>Wed, 16 Dec 2015 14:42:29 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/setting-up-jenkinssonarqube/</guid>
      <description>In this post we will setup SonarQube and Jenkins to perform code quality check and continuous integration.
 Install and configure SonarQube There are many code quality checking tools like PMD, Firebug but SonarQube brings them all under one roof and gives better view of code quality.
Let us install and configure SonarQube for our JCart application.
Download SonarQube from http://www.sonarqube.org/downloads/.
Extract it run sonarqube-5.2/bin/windows-x86-64/StartSonar.bat.
By default SonarQube uses in-memory H2 database to store all the metrics.</description>
    </item>
    
    <item>
      <title>JCart: Configuring HTTPS SSL/TLS</title>
      <link>https://sivalabs.github.io/2015/12/jcart-configuring-https-ssltls/</link>
      <pubDate>Mon, 07 Dec 2015 13:17:45 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-configuring-https-ssltls/</guid>
      <description>So far our JCart application is running on Tomcat default port 8080 using HTTP protocol. In this article we will configure to use HTTPS by using Self Signed Certificate. For real projects you would have to buy certificate from a Trusted Authority.
I would like to run ShoppingCart site on https://host:8443 and if anyone tries to access it from http://host:8080 it should redirect to https://host:8443.
Similarly I would like to run Administration site on https://host:9443 and if anyone tries to access it from http://host:9090 it should redirect to https://host:9443.</description>
    </item>
    
    <item>
      <title>JCart: Admin Reset Password</title>
      <link>https://sivalabs.github.io/2015/12/jcart-admin-reset-password/</link>
      <pubDate>Sun, 06 Dec 2015 10:41:22 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-admin-reset-password/</guid>
      <description>Once the Admin User clicked on Password Reset Link that we sent via Email, we will validate the Token and if is valid then we will show a form to enter New Password, otherwise shows an error.
@Controller public class UserAuthController extends JCartAdminBaseController { ... @RequestMapping(value=&amp;#34;/resetPwd&amp;#34;, method=RequestMethod.GET) public String resetPwd(HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) { String email = request.getParameter(&amp;#34;email&amp;#34;); String token = request.getParameter(&amp;#34;token&amp;#34;); boolean valid = securityService.verifyPasswordResetToken(email, token); if(valid){ model.</description>
    </item>
    
    <item>
      <title>JCart: Admin Forgot Password</title>
      <link>https://sivalabs.github.io/2015/12/jcart-admin-forgot-password/</link>
      <pubDate>Sun, 06 Dec 2015 10:34:33 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-admin-forgot-password/</guid>
      <description>We will provide a link to Forgot Password in Login page and create jcart-admin/src/main/resources/templates/public/forgotPwd.html template as follows:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34; layout:decorator=&amp;#34;layout/guestLayout&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Forgot Password&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body &amp;gt; &amp;lt;div layout:fragment=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;form action=&amp;#34;forgotPwd&amp;#34; th:action=&amp;#34;@{/forgotPwd}&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;email&amp;#34; class=&amp;#34;form-control&amp;#34; name=&amp;#34;email&amp;#34; placeholder=&amp;#34;Email&amp;#34;/&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34; class=&amp;#34;btn btn-primary btn-block btn-flat&amp;#34; th:text=&amp;#34;#{label.submit}&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; When Admin user enters the email address and submit we will generate a token, store it in our DB and generates a Reset Password Link and send it to their email.</description>
    </item>
    
    <item>
      <title>JCart: Email Service SetUp</title>
      <link>https://sivalabs.github.io/2015/12/jcart-email-service-setup/</link>
      <pubDate>Sun, 06 Dec 2015 10:23:36 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-email-service-setup/</guid>
      <description>We are going to implement Admin User Forgot Password functionality where we need to send the Password Reset link to User email address. So let us look at how to configure Email server and send emails.
Spring provides support for sending Emails using JavaMailSender. SpringBoot makes it even easier by providing a starter for emailing support.
As we need Emailing feature in both Admin and ShoppingCart modules, we will implement the emailing functionality in jcart-core module.</description>
    </item>
    
    <item>
      <title>JCart: Configuring Spring Security</title>
      <link>https://sivalabs.github.io/2015/12/jcart-configuring-spring-security/</link>
      <pubDate>Tue, 01 Dec 2015 05:27:15 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-configuring-spring-security/</guid>
      <description>Our JCart Administration site should only be accessible to authorized users only. So, we are going to use SpringSecurity to define the security constraints.
Let us add the following spring-security dependencies to jcart-admin/pom.xml.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.thymeleaf.extras&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;thymeleaf-extras-springsecurity4&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; If we have predefined set of Roles then we can specify the URL patterns and its required Roles something like this:
http .authorizeRequests() .antMatchers(&amp;#34;/login&amp;#34;,&amp;#34;/login/form**&amp;#34;,&amp;#34;/register&amp;#34;,&amp;#34;/logout&amp;#34;).permitAll() .antMatchers(&amp;#34;/admin&amp;#34;,&amp;#34;/admin/**&amp;#34;).hasRole(&amp;#34;ADMIN&amp;#34;) .anyRequest().authenticated() .and() But we need provision to dynamically create new roles as well, hence we can&amp;rsquo;t statically define constraints using role names.</description>
    </item>
    
    <item>
      <title>JCart: Admin UI Layout SetUp</title>
      <link>https://sivalabs.github.io/2015/12/jcart-admin-ui-layout-setup/</link>
      <pubDate>Tue, 01 Dec 2015 04:38:56 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-admin-ui-layout-setup/</guid>
      <description>As I am not really a good UI designer I searched for a free good looking UI website Admin templates and I found this fantastic template https://almsaeedstudio.com/preview. We will be using this template for our Administration web application.
We are going to use Thymeleaf templates for our View layer. Thymeleaf offers facelets style templating mechanism. Basically we need 2 layout templates, one for unauthorized views like Login/ForgotPassword etc and another for authorized users.</description>
    </item>
    
    <item>
      <title>JCart: Create JPA Entities</title>
      <link>https://sivalabs.github.io/2015/12/jcart-create-jpa-entities/</link>
      <pubDate>Tue, 01 Dec 2015 04:26:41 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-create-jpa-entities/</guid>
      <description>We are going to create the JPA Entities for the database tables we designed.
@Entity @Table(name=&amp;#34;users&amp;#34;) public class User { @Id @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; @Column(nullable=false) @NotEmpty() private String name; @Column(nullable=false, unique=true) @NotEmpty @Email(message=&amp;#34;{errors.invalid_email}&amp;#34;) private String email; @Column(nullable=false) @NotEmpty @Size(min=4) private String password; private String passwordResetToken; @ManyToMany(cascade=CascadeType.MERGE) @JoinTable( name=&amp;#34;user_role&amp;#34;, joinColumns={@JoinColumn(name=&amp;#34;USER_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}, inverseJoinColumns={@JoinColumn(name=&amp;#34;ROLE_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}) private List&amp;lt;Role&amp;gt; roles; //setters &amp;amp; getters } @Entity @Table(name=&amp;#34;roles&amp;#34;) public class Role { @Id @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; @Column(nullable=false, unique=true) @NotEmpty private String name; @Column(length=1024) private String description; @ManyToMany(mappedBy=&amp;#34;roles&amp;#34;) private List&amp;lt;User&amp;gt; users; @ManyToMany @JoinTable( name=&amp;#34;role_permission&amp;#34;, joinColumns={@JoinColumn(name=&amp;#34;ROLE_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}, inverseJoinColumns={@JoinColumn(name=&amp;#34;PERM_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}) private List&amp;lt;Permission&amp;gt; permissions; //setters &amp;amp; getters } @Entity @Table(name=&amp;#34;permissions&amp;#34;) public class Permission { @Id @GeneratedValue(strategy=GenerationType.</description>
    </item>
    
    <item>
      <title>JCart: Domain Modelling and Database Designing</title>
      <link>https://sivalabs.github.io/2015/12/jcart-domain-modelling-and-database-designing/</link>
      <pubDate>Tue, 01 Dec 2015 04:22:19 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-domain-modelling-and-database-designing/</guid>
      <description>While developing database driven applications using some ORM framework, some people prefer Object first approach and others follow DB first approach. I prefer DB first approach.
So, let us start listing down all the domain entities in our JCart application domain.
 Product Category Customer Order OrderItem Cart Address User Role Permission  Let us create the database tables as follows:
Though we identified Cart as a domain entity, we are not creating the table for holding the Cart details.</description>
    </item>
    
    <item>
      <title>JCart: Initial Code SetUp</title>
      <link>https://sivalabs.github.io/2015/12/jcart-initial-code-setup/</link>
      <pubDate>Tue, 01 Dec 2015 04:14:09 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-initial-code-setup/</guid>
      <description>Let us create a root pom type maven project with 3 sub-modules jcart-core, jcart-admin and jcart-site.
jcart-core module will contain all the core logic excluding web related stuff.
jcart-admin module will contain all the administration related web functionality like Controllers, Security, Validators etc.
jcart-site module will contain all the shoppingcart related web functionality like Controllers, Security, Validators etc.
All these modules use SpringBoot, but as of now STS/IntellijIdea are not providing option to create multi-module SpringBoot application, we will be creating Maven modules and then configure SpringBoot dependencies manually.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-1</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-1/</link>
      <pubDate>Tue, 01 Dec 2015 04:10:08 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-1/</guid>
      <description>Now that we have completed the most difficult part (writing Introduction to technical article series is much harder than you think!!), so let&amp;rsquo;s start the fun part. Coding!!!
 Note: It is going to be a fast paced tutorial. Obviously we can&amp;rsquo;t cover every little bit of all the technologies used in our application. So I would suggest to explore more on individual technologies like Spring, Thymeleaf on your own.</description>
    </item>
    
    <item>
      <title>Setting up the Development Environment for JCart</title>
      <link>https://sivalabs.github.io/2015/11/setting-up-the-development-environment-for-jcart/</link>
      <pubDate>Tue, 24 Nov 2015 04:34:03 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/setting-up-the-development-environment-for-jcart/</guid>
      <description>For our JCart application development we will be using the following Softwares/Tools.
  JDK 8 SpringSource Tool Suite (STS)  MySQL Git  Maven  Jenkins  SonarQube  Apache/Nginx WebServer  I am not going to explain how to install JDK or MySQL because there are plenty of articles you can find on internet.
If you are using Ubuntu based Linux Operating System then you can refer my article My Development Environment Setup on Linux to setup Java development tool chain.</description>
    </item>
    
    <item>
      <title>JCart Release Planning</title>
      <link>https://sivalabs.github.io/2015/11/jcart-release-planning/</link>
      <pubDate>Tue, 24 Nov 2015 04:26:20 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/jcart-release-planning/</guid>
      <description>In our previous article JCart Requirements Analysis we have listed out all the requirements that we need to implement for JCart application. Now we need to come up with an implementation and release plan. As we are following iteration model, we will plan for N iterations where in each iteration we will implement some usecases.
After listing out all the implementation tasks and based on the task dependencies, we came up with the following Iteration plan.</description>
    </item>
    
    <item>
      <title>Selecting The Technology Stack for JCart</title>
      <link>https://sivalabs.github.io/2015/11/selecting-the-technology-stack-for-jcart/</link>
      <pubDate>Sun, 22 Nov 2015 05:17:20 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/selecting-the-technology-stack-for-jcart/</guid>
      <description>Selecting the right technology stack is very crucial and plays an important role in project success. Many of the architects (unknowingly??!!) try to make complex designs by trying to use all kinds of latest and greatest stuff. On the other hand some architects try to be in their comfort zone by limiting their technology stack to the technologies with which they are comfortable. Both approaches are dangerous. One should understand the business needs and pick the technologies that are necessary for project.</description>
    </item>
    
    <item>
      <title>JCart Requirements Analysis</title>
      <link>https://sivalabs.github.io/2015/11/jcart-requirements-analysis/</link>
      <pubDate>Sat, 21 Nov 2015 11:29:54 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/jcart-requirements-analysis/</guid>
      <description>For building our JCart e-commerce application we will develop two web applications, one for ShoppingCart and another one for Administration. Let us explore the requirements of both ShoppingCart and Administration websites in detail.
ShoppingCart Site Requirements Home Page:This page shows list of categories and few products in each category. From this screen customers can click on any Category name to see all the products in that particular category or can add a product to cart.</description>
    </item>
    
    <item>
      <title>Introducing the application JCart</title>
      <link>https://sivalabs.github.io/2015/11/introducing-the-application-jcart/</link>
      <pubDate>Sat, 21 Nov 2015 02:28:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/introducing-the-application-jcart/</guid>
      <description>As I promised in my article Developing a simple e-commerce application from scratch to production using SpringBoot , I am starting first post by introducing the application JCart that we are going to build.
One of my friend makes quilling toys and she sell them by advertising on Facebook or through word of mouth. Now she is getting more and more customers and she wants to expand her business by going online.</description>
    </item>
    
    <item>
      <title>Developing a simple e-commerce application from scratch to production using SpringBoot</title>
      <link>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</link>
      <pubDate>Fri, 20 Nov 2015 14:18:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</guid>
      <description>We can find plenty of information on any technical topic, be it Java, .NET, Python or any frameworks like Spring, Hibernate, CDI, JSF etc. You can find hundreds of well written blogs on many of these topics. For example, you can find lot of tutorials on how to use SpringBoot or how to use various mappings in JPA/Hibernate or how to do form validations in JSF etc. Also, there are plenty of books published by well established publishers on most of the technologies.</description>
    </item>
    
    <item>
      <title>My Development Environment Setup on Linux</title>
      <link>https://sivalabs.github.io/2015/10/my-development-environment-setup-on-linux/</link>
      <pubDate>Tue, 13 Oct 2015 02:07:05 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/10/my-development-environment-setup-on-linux/</guid>
      <description>As I mentioned in my previous post Thinking of moving from Windows to Linux? I am moving from Windows to Linux. Setting up my development environment is a bit tedious because I have to hunt down the applications and execute various commands to setup. So I thought of make a note of them in a post so that it will be easier for me next time.
I am using Ubuntu/LinuxMint system so I am using apt-get to install, if you are using Fedora/CentOS you can use yum/dnf.</description>
    </item>
    
    <item>
      <title>How to SSH into VirtualBox Linux OS?</title>
      <link>https://sivalabs.github.io/2015/10/how-to-ssh-into-virtualbox-linux-os/</link>
      <pubDate>Tue, 13 Oct 2015 02:05:05 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/10/how-to-ssh-into-virtualbox-linux-os/</guid>
      <description>While learning some of the Linux commands we may want to use SSH commands to login into a remote Linux system and we may not have a dedicated Linux system to play with.
In this post I will explain how I am using my Linux OS installed on VirtualBox to SSH from Windows OS.
1. Install openssh-server on Linux OS in VirtualBox sudo apt-get install openssh-server
On some Linux distros (ex: Fedora) the openssh server won&amp;rsquo;t start automatically.</description>
    </item>
    
    <item>
      <title>Thinking of moving from Windows to Linux?</title>
      <link>https://sivalabs.github.io/2015/10/thinking-of-moving-from-windows-to-linux/</link>
      <pubDate>Tue, 13 Oct 2015 02:02:30 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/10/thinking-of-moving-from-windows-to-linux/</guid>
      <description>I have been using Windows operating system from the beginning. When I first started using computer Windows XP was the latest operating system and it was amazing. After few years I started my career as a Java developer and in my office also I have been using Windows only.
After few years Windows Vista got released and I suffered with it for few months and then Microsoft released Windows 7 which is the best Windows operating system IMO.</description>
    </item>
    
    <item>
      <title>My Life as a Software Developer in India</title>
      <link>https://sivalabs.github.io/2015/07/my-life-as-software-developer-in-india/</link>
      <pubDate>Mon, 06 Jul 2015 16:17:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/07/my-life-as-software-developer-in-india/</guid>
      <description>I am Siva, working as a Software Developer in Hyderabad, India. Working as a Software Developer is very exciting as you see new things coming in everyday. If there are no new things at least we put a new fancy name to some old concept and celebrate (#microservices) :-). But in my opinion working as a Software Developer in India is little bit different and hard too. Few things are good, and few things are bad.</description>
    </item>
    
    <item>
      <title>A Developers Perspective on Spring vs JavaEE</title>
      <link>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</link>
      <pubDate>Mon, 15 Jun 2015 13:04:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</guid>
      <description>In Java community Spring vs JavaEE is a never ending debate. In such debates people form two groups consisting of evangelists, architects and hard core fans of one platform and debate endlessly. Those who participate in the debates may be architects who are responsible for platform selection. But what would developers think about this Spring vs JavaEE debate?
I am a Java developer who uses both Spring and JavaEE and I am not part of Spring or JavaEE fan club.</description>
    </item>
    
    <item>
      <title>CentOS 7 Installation on Oracle Virtualbox</title>
      <link>https://sivalabs.github.io/2015/05/centos-7-installation-on-oracle-virtualbox/</link>
      <pubDate>Mon, 11 May 2015 07:36:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/05/centos-7-installation-on-oracle-virtualbox/</guid>
      <description>I wanted to explore CentOS 7 Linux, so I installed it on my Oracle VirtualBox. Installation went smoothly ,but I had a hard time to install Virtualbox Guest Additions to get full screen. I thought of sharing the steps I performed so that it may be helpful for others.
After installing CentOS 7, before installing Virtualbox Guest Additions first thing we need to do is update system.
sudo yum update</description>
    </item>
    
    <item>
      <title>My Linux Journey Begins</title>
      <link>https://sivalabs.github.io/2015/05/my-linux-journey-begins/</link>
      <pubDate>Mon, 11 May 2015 06:58:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/05/my-linux-journey-begins/</guid>
      <description>Like many people I started working with computers on Windows XP operating system. Even after starting my career as a Java developer I have been working on Windows for all my development activities.
Initially I didn&amp;rsquo;t get a chance(need) to work on Unix/Linux because we didn&amp;rsquo;t have access to any of production systems which are using Linux. After few years we got a new client for whom we need to do deployment also in QA/UAT environments which are all Linux based.</description>
    </item>
    
    <item>
      <title>Can MicroServices Architecture Solve All Your Problems?</title>
      <link>https://sivalabs.github.io/2014/11/can-microservices-architecture-solve-all-your-problems/</link>
      <pubDate>Sun, 30 Nov 2014 01:21:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2014/11/can-microservices-architecture-solve-all-your-problems/</guid>
      <description>IT is one field where you can find new things coming everyday. Theses days the whole developer community websites are flooded with MicroServices and Docker related stuff. Among them the idea of MicroServices is very exciting and encourages better way of building software systems. But as with any architectural style there will be pros and cons to every approach.
Before discussing what are good and bad sides of MicroServices approach, first let me say what I understood about MicroServices.</description>
    </item>
    
    <item>
      <title>NetBeansIDE and IntellijIDEA From The Eyes of a Long Time Eclipse User</title>
      <link>https://sivalabs.github.io/2014/10/netbeanside-and-intellijidea-from-eyes/</link>
      <pubDate>Mon, 13 Oct 2014 07:15:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2014/10/netbeanside-and-intellijidea-from-eyes/</guid>
      <description>I have been using Eclipse IDE since 2006 and I liked it so much for various reasons. First it is open source and free to use. Eclipse looks pretty neat on Windows OS on which I work most of the time. Occasionally I tried to use NetBeansIDE (before 6.x version) and I didn&amp;rsquo;t like it because it&amp;rsquo;s too slow. And I never tried IntellijIDEA because it&amp;rsquo;s a commercial product and I am 100% sure that my employer is not going to pay $$$ for an IDE.</description>
    </item>
    
    <item>
      <title>Clean Code: Don’t mix different levels of abstractions</title>
      <link>https://sivalabs.github.io/2013/12/clean-code-dont-mix-different-levels-of-abstractions/</link>
      <pubDate>Sun, 29 Dec 2013 00:53:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2013/12/clean-code-dont-mix-different-levels-of-abstractions/</guid>
      <description>We spend more time on reading code than writing. So if the code is more readable then obviously it will increase the developer productivity.
Many people associate readability of code with coding conventions like following standard naming conventions, closing file, DB resources etc etc. When it comes to code reviews most of the people focus on these trivial things only, like checking for naming convention violations, properly releasing resources in finally block or not.</description>
    </item>
    
    <item>
      <title>PrimeFaces Beginner’s Guide book published</title>
      <link>https://sivalabs.github.io/2013/11/primefaces-beginners-guide-book-published/</link>
      <pubDate>Thu, 28 Nov 2013 04:02:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2013/11/primefaces-beginners-guide-book-published/</guid>
      <description>I am glad to announce that my second book PrimeFaces Beginner&amp;rsquo;s Guide is published.
As many of us know PrimeFaces is leading JSF component library for JSF based web applications. This PrimeFaces Beginner&amp;rsquo;s Guide book targets the Java developers with basic knowledge on JSF and jQuery and covers most of the commonly used PrimeFaces components.
 Good news is that PrimeFaces Beginner&amp;rsquo;s Guide book covers the latest PrimeFaces 4.0 version features such as Client Side Validations (CSV) framework: Dialog Framework, Search Expressions, Sticky Component and many other enhancement as well.</description>
    </item>
    
    <item>
      <title>Packt Publishing “Java Persistence With MyBatis3” published</title>
      <link>https://sivalabs.github.io/2013/07/packt-publishing-java-persistence-with-mybatis3-published/</link>
      <pubDate>Tue, 16 Jul 2013 10:01:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2013/07/packt-publishing-java-persistence-with-mybatis3-published/</guid>
      <description>Hurray…My first book Java Persistence with MyBatis3 is published. I would like to thank Packt Publishers for giving me this opportunity to write on my favorite framework MyBatis.
For most of the software applications data persistence is a key and important aspect. In Java land we have many ways of implementing persistence layer starting from low level JDBC to fancy ORM frameworks.
JDBC is too low level API and needs to write a lot of boilerplate code.</description>
    </item>
    
    <item>
      <title>A bunch of Maven Archetypes for Spring based Projects</title>
      <link>https://sivalabs.github.io/2012/10/a-bunch-of-maven-archetypes-for-spring-based-projects/</link>
      <pubDate>Mon, 29 Oct 2012 12:18:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/a-bunch-of-maven-archetypes-for-spring-based-projects/</guid>
      <description>Maven is a good project management tool which greatly reduces the amount of time we spend on creating java projects with proper structure. With so many predefined maven archetypes it is even easier to create projects by simply selecting the archetype based on the technologies we need and type(jar/war/ear) of project we want to create.
However sometimes those predefined archetypes structure may not suite well for our needs or we may need some more additions to the pre-configured dependencies/frameworks etc.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial : Part4 – Spring Integration</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part4-spring-integration/</link>
      <pubDate>Wed, 24 Oct 2012 00:40:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part4-spring-integration/</guid>
      <description>MyBatis Tutorial: Part1 – CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 – Mapping Relationships
MyBatis Tutorial : Part4 – Spring Integration
MyBatis-Spring is a sub-project of MyBatis and provides Spring integration support which drastically simplifies the MyBatis usage. For those who are familiar with Spring&amp;rsquo;s way of Dependency Injection process, using MyBatis-Spring is a very simple.
First let us see the process of using MyBatis without Spring.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part 3 – Mapping Relationships</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-3-mapping-relationships/</link>
      <pubDate>Sun, 21 Oct 2012 14:07:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-3-mapping-relationships/</guid>
      <description>In this post let us see how to use MyBatis ResultMap configuration to map relationships.
MyBatis Tutorial: Part1 – CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 – Mapping Relationships
MyBatis Tutorial : Part4 – Spring Integration
To illustrate we are considering the following sample domain model:
There will be Users and each User may have a Blog and each Blog can contain zero or more posts.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part-2: CRUD operations Using Annotations</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-2-crud-operations-using-annotations/</link>
      <pubDate>Sun, 21 Oct 2012 11:49:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-2-crud-operations-using-annotations/</guid>
      <description>In this post I will explain how to perform CRUD operations using MyBatis Annotation support without need of Queries configuration in XML mapper files.
MyBatis Tutorial: Part1 – CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 – Mapping Relationships
MyBatis Tutorial : Part4 – Spring Integration
Step#1: Create a table BLOG and a java domain Object Blog.
CREATE TABLE blog ( blog_id int(10) unsigned NOT NULL auto_increment, blog_name varchar(45) NOT NULL, created_on datetime NOT NULL, PRIMARY KEY (blog_id) ) ENGINE=InnoDB DEFAULT CHARSET=latin1; package com.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part1 – CRUD Operations</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part1-crud-operations/</link>
      <pubDate>Sun, 21 Oct 2012 11:10:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part1-crud-operations/</guid>
      <description>MyBatis is an SQL Mapper tool which greatly simplifies the database programing when compared to using JDBC directly.
MyBatis Tutorial: Part1 – CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 – Mapping Relationships
MyBatis Tutorial : Part4 – Spring Integration
Step1: Create a Maven project and configure MyBatis dependencies.
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.sivalabs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-demo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;mybatis-demo&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Keep The Code Clean: WatchDog &amp; SpotTheBug Approach</title>
      <link>https://sivalabs.github.io/2012/08/keep-code-clean-watchdog-spotthebug/</link>
      <pubDate>Tue, 28 Aug 2012 04:55:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/08/keep-code-clean-watchdog-spotthebug/</guid>
      <description>Before going to discuss WatchDog &amp;amp; SpotTheBug Approach, let me give a brief context on what is the needs for this.
Three months back I was asked to write core infrastructure code for our new application which uses all the latest and greatest technologies.
I have written the infrastructure code and implemented 2 usecases to demonstrate which logic should go into which layer and the code looks good(atleast to me :-)).</description>
    </item>
    
    <item>
      <title>When to use RequestDispatcher.forward() and response.sendRedirect()?</title>
      <link>https://sivalabs.github.io/2011/08/when-to-use-requestdispatcherforward/</link>
      <pubDate>Thu, 25 Aug 2011 00:35:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/08/when-to-use-requestdispatcherforward/</guid>
      <description>Many people know about how RequestDispatcher.forward() and response.sendRedirect() works.
RequestDispatcher.forward() is generally called Server side redirection and is used to forward to a resource within the same application. That resource could be a JSP or another Servlet.
response.sendRedirect() is generally called as Client side redirection as it issues a new request from the browser. This method is used to redirect to another resource within the same application or to the resource in some other application running in the same web container or can redirect to any other resource running in someother web container.</description>
    </item>
    
    <item>
      <title>Are frameworks making developers dumb?</title>
      <link>https://sivalabs.github.io/2011/08/frameworks-making-developers-dumb/</link>
      <pubDate>Mon, 22 Aug 2011 01:16:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/08/frameworks-making-developers-dumb/</guid>
      <description>Last week I got to take interviews to hire senior java developers with around 5 years of experience. But after the interview process is over I felt like the frameworks makes developers life easier but at the same time making them dumb.
Everyone puts almost all the new frameworks on their resume claiming they have “Strong, working experience on Spring, Hibernate, Web Services etc”.
Here is how the interviews went on.</description>
    </item>
    
    <item>
      <title>10 things to become an outstanding Java developer</title>
      <link>https://sivalabs.github.io/2011/01/10-things-to-become-outstanding-java/</link>
      <pubDate>Wed, 26 Jan 2011 07:11:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/01/10-things-to-become-outstanding-java/</guid>
      <description>If you are a java developer and passionate about technology, you can follow the below things which makes you an outstanding Java developer.
1. Have strong foundation and understanding on OO Principles For a java developer having strong understanding on Object Oriented Programming is a must. Without having a strong foundation on OOPS, one can&amp;rsquo;t realize the beauty of an Object Oriented Programming language like Java. If you don&amp;rsquo;t have good idea on what OOPS is, eventhough you are using OOP language you may be still coding in procedural way.</description>
    </item>
    
    <item>
      <title>Welcome note</title>
      <link>https://sivalabs.github.io/2008/12/welcome-note/</link>
      <pubDate>Sun, 21 Dec 2008 08:05:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2008/12/welcome-note/</guid>
      <description>Hi All,
Welcome folks. This is a blog where in you can find tutorials on various Java and JavaEE technologies and can have discussions regarding technical problems and application development related issues.</description>
    </item>
    
  </channel>
</rss>